from sys import argv
import re

nl = '\n'

def generate(input_file: str, includes, tests):
    return f"""
/* AUTOGENERATED FILE. DO NOT EDIT. */
/*=======Automagically Detected Files To Include=====*/
#include "FreeRTOS.h"
{ nl.join([ f'#include "{include}"' for include in includes ]) }


/*=======External Functions This Runner Calls=====*/
extern void setup_test(void);
{ nl.join( [ f'extern void { test[0] }(void);' for test in tests ] ) }

/*=======Test Runner Used To Run Each Test=====*/
static void run_test(UnityTestFunction func, const char *name, UNITY_LINE_TYPE line_num) @co@
  Unity.CurrentTestName = name;
  Unity.CurrentTestLineNumber = line_num;

  Unity.NumberOfTests++;
  UNITY_CLR_DETAILS();

  if (TEST_PROTECT()) @co@
    vTaskSuspendAll();
    setup_test();
    xTaskResumeAll();

    func();
  @cc@

  UnityConcludeTest();
@cc@

/*=======MAIN TASK=====*/
TASK(test_task, TASK_STACK_4096) @co@
  UnityBegin("{ input_file }");

{ nl.join([ f'  run_test({ test[0] }, "{ test[0] }", { test[1] });' for test in tests ]) }

  exit(UnityEnd());
@cc@

/*=======MAIN=====*/
int main() @co@
  setup_test();
  tasks_init_task(test_task, configMAX_PRIORITIES - 1, NULL);
  tasks_start();
  return 0;
@cc@
"""

def find_tests(input):
    tests = []
    for lineNum, line in enumerate(input):
        res = re.search('^\s*void \s*(test_([A-z]|_)*)\s*\((void)?\)', line)
        if res != None:
            tests.append((res.group(1), lineNum + 1))
    return tests

def find_includes(input):
    includes = { "FreeRTOS.h", "unity.h", "tasks.h", "stdlib.h" }
    for line in input:
        res = re.search('^\s*#include \s*"(([A-z]|_)*\.h)"', line)
        if res != None:
            includes.add(res.group(1))
    includes.remove("FreeRTOS.h")
    return includes

def main(input_file, output_file):
    # find includes etc.
    replace = [ ("@co@", "{"), ("@cc@", "}") ]

    with open(input_file, 'r') as input:
        content = input.readlines()

    include = find_includes(content)
    tests = find_tests(content)

    if len(tests) == 0:
        raise Exception(f"No tests specified in {input_file}")

    with open(output_file, 'w') as output:
        res = generate("test", include, tests)
        for k, v in replace:
            res = res.replace(k, v)
        output.write(res)

main(argv[2], argv[3])
