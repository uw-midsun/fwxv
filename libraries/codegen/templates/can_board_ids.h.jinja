#pragma once

#define SYSTEM_CAN_MESSAGE_BPS_HEARTBEAT \
  (BMS_CARRIER_BPS_HEARTBEAT << 5) + SYSTEM_CAN_DEVICE_BMS_CARRIER
#define SYSTEM_CAN_MESSAGE_BATTERY_VT (BMS_CARRIER_BATTERY_VT << 5) + SYSTEM_CAN_DEVICE_BMS_CARRIER
#define SYSTEM_CAN_MESSAGE_BATTERY_AGGREGATE_VC \
  (BMS_CARRIER_BATTERY_AGGREGATE_VC << 5) + SYSTEM_CAN_DEVICE_BMS_CARRIER
#define SYSTEM_CAN_MESSAGE_BATTERY_FAN_STATE \
  (BMS_CARRIER_BATTERY_FAN_STATE << 5) + SYSTEM_CAN_DEVICE_BMS_CARRIER
#define SYSTEM_CAN_MESSAGE_BATTERY_RELAY_STATE \
  (BMS_CARRIER_BATTERY_RELAY_STATE << 5) + SYSTEM_CAN_DEVICE_BMS_CARRIER

#define SYSTEM_CAN_MESSAGE_SET_RELAY_STATES \
  (CENTRE_CONSOLE_SET_RELAY_STATES << 5) + SYSTEM_CAN_DEVICE_CENTRE_CONSOLE
#define SYSTEM_CAN_MESSAGE_POWER_ON_MAIN_SEQUENCE \
  (CENTRE_CONSOLE_POWER_ON_MAIN_SEQUENCE << 5) + SYSTEM_CAN_DEVICE_CENTRE_CONSOLE
#define SYSTEM_CAN_MESSAGE_POWER_OFF_SEQUENCE \
  (CENTRE_CONSOLE_POWER_OFF_SEQUENCE << 5) + SYSTEM_CAN_DEVICE_CENTRE_CONSOLE
#define SYSTEM_CAN_MESSAGE_POWER_ON_AUX_SEQUENCE \
  (CENTRE_CONSOLE_POWER_ON_AUX_SEQUENCE << 5) + SYSTEM_CAN_DEVICE_CENTRE_CONSOLE
#define SYSTEM_CAN_MESSAGE_DRIVE_OUTPUT \
  (CENTRE_CONSOLE_DRIVE_OUTPUT << 5) + SYSTEM_CAN_DEVICE_CENTRE_CONSOLE
#define SYSTEM_CAN_MESSAGE_SET_EBRAKE_STATE \
  (CENTRE_CONSOLE_SET_EBRAKE_STATE << 5) + SYSTEM_CAN_DEVICE_CENTRE_CONSOLE
#define SYSTEM_CAN_MESSAGE_REGEN_BRAKING \
  (CENTRE_CONSOLE_REGEN_BRAKING << 5) + SYSTEM_CAN_DEVICE_CENTRE_CONSOLE
#define SYSTEM_CAN_MESSAGE_READY_TO_DRIVE \
  (CENTRE_CONSOLE_READY_TO_DRIVE << 5) + SYSTEM_CAN_DEVICE_CENTRE_CONSOLE
#define SYSTEM_CAN_MESSAGE_BEGIN_PRECHARGE \
  (CENTRE_CONSOLE_BEGIN_PRECHARGE << 5) + SYSTEM_CAN_DEVICE_CENTRE_CONSOLE
#define SYSTEM_CAN_MESSAGE_HAZARD (CENTRE_CONSOLE_HAZARD << 5) + SYSTEM_CAN_DEVICE_CENTRE_CONSOLE
#define SYSTEM_CAN_MESSAGE_DISCHARGE_PRECHARGE \
  (CENTRE_CONSOLE_DISCHARGE_PRECHARGE << 5) + SYSTEM_CAN_DEVICE_CENTRE_CONSOLE
#define SYSTEM_CAN_MESSAGE_STATE_TRANSITION_FAULT \
  (CENTRE_CONSOLE_STATE_TRANSITION_FAULT << 5) + SYSTEM_CAN_DEVICE_CENTRE_CONSOLE
#define SYSTEM_CAN_MESSAGE_ALLOW_CHARGING \
  (CENTRE_CONSOLE_ALLOW_CHARGING << 5) + SYSTEM_CAN_DEVICE_CENTRE_CONSOLE

#define SYSTEM_CAN_MESSAGE_RELAY_OPEN_OK_5_MPPTS \
  (SOLAR_5_MPPTS_RELAY_OPEN_OK_5_MPPTS << 5) + SYSTEM_CAN_DEVICE_SOLAR_5_MPPTS
#define SYSTEM_CAN_MESSAGE_SOLAR_DATA_5_MPPTS \
  (SOLAR_5_MPPTS_SOLAR_DATA_5_MPPTS << 5) + SYSTEM_CAN_DEVICE_SOLAR_5_MPPTS
#define SYSTEM_CAN_MESSAGE_SOLAR_FAULT_5_MPPTS \
  (SOLAR_5_MPPTS_SOLAR_FAULT_5_MPPTS << 5) + SYSTEM_CAN_DEVICE_SOLAR_5_MPPTS

#define SYSTEM_CAN_MESSAGE_RELAY_OPEN_OK_6_MPPTS \
  (SOLAR_6_MPPTS_RELAY_OPEN_OK_6_MPPTS << 5) + SYSTEM_CAN_DEVICE_SOLAR_6_MPPTS
#define SYSTEM_CAN_MESSAGE_SOLAR_DATA_6_MPPTS \
  (SOLAR_6_MPPTS_SOLAR_DATA_6_MPPTS << 5) + SYSTEM_CAN_DEVICE_SOLAR_6_MPPTS
#define SYSTEM_CAN_MESSAGE_SOLAR_FAULT_6_MPPTS \
  (SOLAR_6_MPPTS_SOLAR_FAULT_6_MPPTS << 5) + SYSTEM_CAN_DEVICE_SOLAR_6_MPPTS

#define SYSTEM_CAN_MESSAGE_PEDAL_OUTPUT (PEDAL_PEDAL_OUTPUT << 5) + SYSTEM_CAN_DEVICE_PEDAL

#define SYSTEM_CAN_MESSAGE_DRIVE_STATE \
  (MOTOR_CONTROLLER_DRIVE_STATE << 5) + SYSTEM_CAN_DEVICE_MOTOR_CONTROLLER
#define SYSTEM_CAN_MESSAGE_PRECHARGE_COMPLETED \
  (MOTOR_CONTROLLER_PRECHARGE_COMPLETED << 5) + SYSTEM_CAN_DEVICE_MOTOR_CONTROLLER
#define SYSTEM_CAN_MESSAGE_MOTOR_CONTROLLER_VC \
  (MOTOR_CONTROLLER_MOTOR_CONTROLLER_VC << 5) + SYSTEM_CAN_DEVICE_MOTOR_CONTROLLER
#define SYSTEM_CAN_MESSAGE_MOTOR_VELOCITY \
  (MOTOR_CONTROLLER_MOTOR_VELOCITY << 5) + SYSTEM_CAN_DEVICE_MOTOR_CONTROLLER
#define SYSTEM_CAN_MESSAGE_MOTOR_STATUS \
  (MOTOR_CONTROLLER_MOTOR_STATUS << 5) + SYSTEM_CAN_DEVICE_MOTOR_CONTROLLER
#define SYSTEM_CAN_MESSAGE_MOTOR_SINK_TEMPS \
  (MOTOR_CONTROLLER_MOTOR_SINK_TEMPS << 5) + SYSTEM_CAN_DEVICE_MOTOR_CONTROLLER
#define SYSTEM_CAN_MESSAGE_DSP_BOARD_TEMPS \
  (MOTOR_CONTROLLER_DSP_BOARD_TEMPS << 5) + SYSTEM_CAN_DEVICE_MOTOR_CONTROLLER

#define SYSTEM_CAN_MESSAGE_LIGHTS_SYNC \
  (POWER_DISTRIBUTION_REAR_LIGHTS_SYNC << 5) + SYSTEM_CAN_DEVICE_POWER_DISTRIBUTION_REAR
#define SYSTEM_CAN_MESSAGE_REAR_CURRENT_MEASUREMENT         \
  (POWER_DISTRIBUTION_REAR_REAR_CURRENT_MEASUREMENT << 5) + \
      SYSTEM_CAN_DEVICE_POWER_DISTRIBUTION_REAR
#define SYSTEM_CAN_MESSAGE_REAR_PD_FAULT \
  (POWER_DISTRIBUTION_REAR_REAR_PD_FAULT << 5) + SYSTEM_CAN_DEVICE_POWER_DISTRIBUTION_REAR

#define SYSTEM_CAN_MESSAGE_LIGHTS (STEERING_LIGHTS << 5) + SYSTEM_CAN_DEVICE_STEERING
#define SYSTEM_CAN_MESSAGE_HORN (STEERING_HORN << 5) + SYSTEM_CAN_DEVICE_STEERING
#define SYSTEM_CAN_MESSAGE_CRUISE_CONTROL_COMMAND \
  (STEERING_CRUISE_CONTROL_COMMAND << 5) + SYSTEM_CAN_DEVICE_STEERING
#define SYSTEM_CAN_MESSAGE_REGEN_BRAKING_TOGGLE_REQUEST \
  (STEERING_REGEN_BRAKING_TOGGLE_REQUEST << 5) + SYSTEM_CAN_DEVICE_STEERING

#define SYSTEM_CAN_MESSAGE_AUX_MEAS_MAIN_VOLTAGE \
  (POWER_SELECT_AUX_MEAS_MAIN_VOLTAGE << 5) + SYSTEM_CAN_DEVICE_POWER_SELECT
#define SYSTEM_CAN_MESSAGE_DCDC_MEAS_MAIN_CURRENT \
  (POWER_SELECT_DCDC_MEAS_MAIN_CURRENT << 5) + SYSTEM_CAN_DEVICE_POWER_SELECT
#define SYSTEM_CAN_MESSAGE_POWER_SELECT_STATUS \
  (POWER_SELECT_POWER_SELECT_STATUS << 5) + SYSTEM_CAN_DEVICE_POWER_SELECT

#define SYSTEM_CAN_MESSAGE_UV_CUTOFF_NOTIFICATION          \
  (POWER_DISTRIBUTION_FRONT_UV_CUTOFF_NOTIFICATION << 5) + \
      SYSTEM_CAN_DEVICE_POWER_DISTRIBUTION_FRONT
#define SYSTEM_CAN_MESSAGE_FRONT_CURRENT_MEASUREMENT          \
  (POWER_DISTRIBUTION_FRONT_FRONT_CURRENT_MEASUREMENT << 5) + \
      SYSTEM_CAN_DEVICE_POWER_DISTRIBUTION_FRONT
#define SYSTEM_CAN_MESSAGE_FRONT_PD_FAULT \
  (POWER_DISTRIBUTION_FRONT_FRONT_PD_FAULT << 5) + SYSTEM_CAN_DEVICE_POWER_DISTRIBUTION_FRONT

#define SYSTEM_CAN_MESSAGE_REQUEST_TO_CHARGE \
  (CHARGER_REQUEST_TO_CHARGE << 5) + SYSTEM_CAN_DEVICE_CHARGER
#define SYSTEM_CAN_MESSAGE_CHARGER_CONNECTED_STATE \
  (CHARGER_CHARGER_CONNECTED_STATE << 5) + SYSTEM_CAN_DEVICE_CHARGER
#define SYSTEM_CAN_MESSAGE_CHARGER_FAULT (CHARGER_CHARGER_FAULT << 5) + SYSTEM_CAN_DEVICE_CHARGER

#define SYSTEM_CAN_MESSAGE_BABYDRIVER (BABYDRIVER_BABYDRIVER << 5) + SYSTEM_CAN_DEVICE_BABYDRIVER

#include <stdbool.h>

{% set boards = data["Boards"] -%}

// For setting the CAN device
typedef enum {
    {% for board in boards -%}
    SYSTEM_CAN_DEVICE_{{ board | upper }} = {{ loop.index0 }},
    {% endfor -%}
    NUM_SYSTEM_CAN_DEVICES = {{ boards | length }}
} SystemCanDevice;
