{% set boards = data["Boards"] -%}
{% set messages = data["Messages"] -%}

import struct
import subprocess
import time 
import threading

{% for message in messages -%}
{% if message.critical %}SYSTEM_CAN_MESSAGE_{{ message.sender | upper }}_{{ message.name | upper }} = ({{ message.id }}) {% else %}SYSTEM_CAN_MESSAGE_{{ message.sender | upper }}_{{ message.name | upper }} = (({{ message.id }} << 5) + SYSTEM_CAN_DEVICE_{{ message.sender | upper }}) {% endif %}
{% endfor -%}

# Send single message
def send_message(id, data):
    # id: int -> hex, data: str
    cmd = f"cansend can0 {hex(id)[2:].zfill(3)}#{data}"
    subprocess.run(cmd, shell=True)

def pack(num, size):
    if isinstance(num, float) and (size == 32):
        return struct.pack("f", num).hex()
    elif (size == 32):
        return struct.pack("i", num).hex()
    elif (size == 16):
        return struct.pack("h", num).hex()
    elif (size == 8):
        return struct.pack("b", num).hex()

{%- for message in messages %}
def send_{{ message["sender"] }}_{{ message.name }}(
    {%- for signal in message.signals %}
        {{- signal.name -}}{{- ", " if not loop.last -}}
    {%- endfor -%}
):
    send_message(SYSTEM_CAN_MESSAGE_{{  message["sender"] | upper }}_{{ message.name | upper }},
    {%- for signal in message.signals %}
        pack({{ signal.name }}, {{ signal["length"] }}){{ ' + ' if not loop.last }}
    {%- endfor -%}
    )
{% endfor %}

def repeat(repeat_period, send_device_message, *args):
    def threading_repeat(kill_process):
        while not kill_process.is_set():
            send_device_message(*args)
            time.sleep(repeat_period)

    kill_process = threading.Event()

    process_name = threading.Thread(target=threading_repeat, args=(kill_process,))
    process_name.start()

    return process_name, kill_process

def end_repeat(send_device_message_process, kill_process):
    kill_process.set()
    send_device_message_process.join()
