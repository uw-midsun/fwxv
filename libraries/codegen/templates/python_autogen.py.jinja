{% set bitstream = data["bitstream"] -%}
{% set messages_dict = data["Messages_dict"] -%}

def decode_packet(messages_dict, bitstream):
    # Clean the bitstream by removing spaces
    clean_bitstream = bitstream.replace(" ", "")

    # Extract the source_id (first 8 bits)
    source_id_binary = clean_bitstream[0:8]
    source_id = int(source_id_binary, 2)  # Assuming it's a binary string
    print(source_id)

    # Extract the msg_id (next 24 bits)
    msg_id_binary = clean_bitstream[8:32]
    msg_id = int(msg_id_binary, 2)  # Assuming it's a binary string
    print(msg_id)

    # Message definition
    if 0 < msg_id <= 63:
        message = messages_dict[msg_id]
    else:
        print(f"Message ID {msg_id} not found in messages dictionary.")
        return

    parsed_signals = []
    data_start_bit = 56

    # Iterate through each signal in the message dictionary
    for signal in message['signals']:
        name = signal['name']
        start_bit = signal['start_bit'] + data_start_bit
        length = signal['length']

        # Extract the relevant bits for the signal
        signal_bits = clean_bitstream[start_bit:start_bit + length]

        # Convert the bits to a decimal value
        signal_value = int(signal_bits, 2)  # Assuming it's a binary string

        # Store the parsed signal value
        parsed_signals.append({
            "name": name,
            "value": signal_value
        })

    return {
        "message ID": msg_id,
        "message name": message["name"],
        "signals": parsed_signals
    }