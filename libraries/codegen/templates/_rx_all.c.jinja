{% set messages = data["Messages"] -%}
{% set board = data["Board"] -%}

#include "can_board_ids.h"
#include "can_codegen.h"
#include "can_watchdog.h"

{% for message, message_data in messages.items() %}
    {%- if message_data["target"][board]["watchdog"] != 0 %}
CanWatchDog s_{{message}}_msg_watchdog = {0, {{message_data["target"][board]["watchdog"] | lower}}, 0};
    {%- endif %}
{%- endfor %}

void can_rx_all() {
    CanMessage msg = { 0 };
    while (can_receive(&msg) == STATUS_CODE_OK) {
        // TODO: Not sure if for loop is best way
        // Might be O(n)
        // If store all functions in callback array may be better?
        // Or do some sort or binary search for O(lgn)
        switch (msg.id.raw) {
        {%- for message, message_data in messages.items() %}
            case SYSTEM_CAN_MESSAGE_{{message_data["src"] | upper}}_{{message | upper}}:
            {%- set offset = namespace(value=0) %}
            {%- for signal, signal_data in message_data['signals'].items() %}
                g_rx_struct.{{message}}_{{signal}} = (msg.data >> {{offset.value}});
                {%- set offset.value = offset.value + signal_data.length %}
            {%- endfor %}
                g_rx_struct.received_{{message}} = true;
            {%- if message_data["target"][board]["watchdog"] %}
                s_{{message}}_msg_watchdog.cycles_over = 0;
            {%- endif %}
                break;
        {%- endfor %}
            default:
                break;
        }
    }
}

void clear_rx_received() {
{%- for message, message_data in messages.items() %}
    g_rx_struct.received_{{message}} = false;
{%- endfor %}
}

StatusCode check_can_watchdogs() {
    StatusCode status = STATUS_CODE_OK;
{%- for message, message_data in messages.items() %}
    {%- if message_data["target"][board]["watchdog"] != 0 %}
    if (!g_rx_struct.received_{{message}}) {
        ++s_{{message}}_msg_watchdog.cycles_over;
        if (s_{{message}}_msg_watchdog.cycles_over >= s_{{message}}_msg_watchdog.max_cycles) {
            LOG_CRITICAL("DID NOT RECEIVE CAN MESSAGE: %u IN MAX CYCLES : %u\n", SYSTEM_CAN_MESSAGE_{{message_data["src"] | upper}}_{{message | upper}},
                            s_{{message}}_msg_watchdog.max_cycles);
            s_{{message}}_msg_watchdog.missed = 1;
            status = STATUS_CODE_TIMEOUT;
        }
    } else {
        s_{{message}}_msg_watchdog.cycles_over = 0;
        s_{{message}}_msg_watchdog.missed = 0;
    }
    {%- endif %}
{%- endfor %}
    return status;
}

