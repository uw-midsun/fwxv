#pragma once
#include "can_msg_defs.h" 
#include "can_pack_impl.h" 
{% set messages = data["Messages"] -%}

{%- for message in messages -%}
{%- set signal = data['Messages'][message]['signals'].keys() | list -%}
{%- set signal_length = data["Messages"][message]['signals'][signal[0]].values() | list %}

{% set message_1 %}void can_pack_{{message}}(CanMessage *msg_ptr{%- for key in signal-%}, uint{{signal_length[0]}}_t {{key}}_u{{signal_length[0]}}{%- endfor%}){ {% endset -%}
{%- set message_2 %}can_pack_impl_u{{signal_length[0]}}((msg_ptr), SYSTEM_CAN_DEVICE_BMS_CARRIER, SYSTEM_CAN_MESSAGE_{{message|upper}}, {{data['Messages'][message]['id']}}, {% endset -%}
{%- set message_3 %}{% for key in signal%}{%if loop.first %} ({{key}}_u{{signal_length[0]}}){% else %}, ({{key}}_u{{signal_length[0]}}){% endif %}{% endfor-%}{% endset -%}
{%- set message_4 %}{% for i in range((64 / signal_length[0] - data['Messages'][message]['signals']|length)| int )%}, CAN_PACK_IMPL_EMPTY{% endfor %}); }{% endset -%}
{% set bms_function %}{{message_1}}{{message_2}}{{message_3}}{{message_4}}{% endset -%}

{{bms_function}}
{%- endfor %}