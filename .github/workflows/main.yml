name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  DEFINES: "LOG_LEVEL=LOG_LEVEL_WARN"
  GCC_VERSION: "13.2.1"
  GCC_PATH: "arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi"
  GCC_ARCHIVE: "arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi.tar.xz"
  GCC_URL: "https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi.tar.xz"

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 12
    steps:
      - uses: actions/checkout@v3

      - name: Get and run setup script
        run: |
          wget https://raw.githubusercontent.com/uw-midsun/box/master/requirements.sh
          chmod +x ./requirements.sh
          sudo ./requirements.sh
          pip install -r requirements.txt --upgrade

      - name: Install libncurses5
        run: sudo apt-get install -y libncurses5 libncursesw5

      - name: Install STM32 toolchain
        run: |
          cd /tmp
          wget -nv ${{ env.GCC_URL }}
          sudo tar xf ${{ env.GCC_ARCHIVE }} -C /usr/share/
          sudo ln -s /usr/share/${{ env.GCC_PATH }}/bin/* /usr/bin/
          
          # Add optimization flags to environment
          echo "CFLAGS=-O3 -flto -ffunction-sections -fdata-sections" >> $GITHUB_ENV
          echo "LDFLAGS=-Wl,--gc-sections" >> $GITHUB_ENV

      - name: Force PATH to update
        run: hash -r

      - name: Print versions of everything
        run: |
          arm-none-eabi-gcc --version
          arm-none-eabi-objcopy --version
          arm-none-eabi-objdump --version
          arm-none-eabi-size --version
          arm-none-eabi-gcc-ar --version
          arm-none-eabi-gdb --version
          gcc --version
          make --version
          clang --version
          clang-format --version
          pylint --version

      - name: Format and lint
        run: |
          scons format
          if [[ $(git diff --name-only) ]] ; then 
            echo -e "\n unformatted files:";
            git diff --name-only;
            exit 1;
          fi

          scons lint
          if [ $? -ne 0 ] ; then
            echo -e "\n lint failed";
            exit 1;
          fi

      - name: Build stm32f10x
        id: build-stm32
        run: |
          scons --platform=arm --define="${DEFINES}" CFLAGS="${{ env.CFLAGS }}" LDFLAGS="${{ env.LDFLAGS }}"

      - name: Build and test
        id: build-test
        run: |
          # Setting up vcan
          sudo apt-get install -y linux-modules-extra-$(uname -r)
          sudo modprobe can
          sudo modprobe can_raw
          sudo modprobe vcan
          sudo ip link add dev vcan0 type vcan
          sudo ip link set up vcan0

          scons --platform=x86 --define="${DEFINES}"
          scons test --platform=x86 --define="${DEFINES}"