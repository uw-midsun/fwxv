#!/usr/bin/env python3
"""New target script.

This module sets up the folder structure and config.json for a new project or library.

Usage: python3 new_target.py project|library name
"""
import os
import textwrap
import json
import sys
from string import Template

###########################################################
# Variables setup
###########################################################

Import('VARS')

TYPE = VARS.get("TYPE")
TARGET = VARS.get("TARGET")

README_TEMPLATE = Template("""\
    <!--
        General guidelines
        These are just guidelines, not strict rules - document however seems best.
        A README for a firmware-only project (e.g. Babydriver, MPXE, bootloader, CAN explorer) should answer the following questions:
            - What is it?
            - What problem does it solve?
            - How do I use it? (with usage examples / example commands, etc)
            - How does it work? (architectural overview)
        A README for a board project (powering a hardware board, e.g. power distribution, centre console, charger, BMS carrier) should answer the following questions:
            - What is the purpose of the board?
            - What are all the things that the firmware needs to do?
            - How does it fit into the overall system?
            - How does it work? (architectural overview, e.g. what each module's purpose is or how data flows through the firmware)
    -->
    # $name

    """)


DEFAULT_DEPS = ["FreeRTOS", "ms-common"]

main_template_file = open(os.path.join('template', 'main_template.txt'), 'r')

def generate_config(target_type):
    """Generates a new config.json file for a project/library.

    Args:
        target_type: Either 'project' or 'library'

    Returns:
        dict: dictionary representation of the initial config.json file.
    """
    deps = DEFAULT_DEPS if target_type == 'project' or target_type == 'smoke' else []

    return {"libs": deps}

def new_target(target_type, name):
    """Creates a new project or library.

    Creates a subfolder in the appropriate folder with the specified name
    with the following structure:

    projects/libraries
    - name
        - inc
        - README.md
        - config.json 
        - src
        - test

    where config.json is required for the project or library to be valid.

    Args:
        target_type: Either 'project' or 'library' or 'python'.
        name: The new project or library's name.

    Returns:
        None
    """
    if (target_type == 'python'):
        return new_py_project(name)

    type_folders = {
        'project': 'projects',
        'library': 'libraries',
        'smoke': 'smoke'
    }

    proj_path = os.path.join(type_folders[target_type], name)
    folders = ['src', 'inc', 'test']

    for folder in folders:
        os.makedirs(os.path.join(proj_path, folder), exist_ok=True)

    with open(os.path.join(proj_path, 'config.json'), 'w') as config_file:
        json.dump(generate_config(target_type), config_file, indent=4)

    with open(os.path.join(proj_path, 'README.md'), 'w') as readme_file:
        readme_file.write(textwrap.dedent(README_TEMPLATE.substitute({'name': name})))

    with open(os.path.join(proj_path, 'src', 'main.c'), 'w') as main_file:
        main_file.write(textwrap.dedent(main_template_file.read()))

    print('Created new {0} {1}'.format(target_type, name))

def new_py_project(name):
    os.makedirs(os.path.join('py', name), exist_ok=True)
    open(os.path.join('py', name, '__init__.py'), 'a').close()
    open(os.path.join('py', name, 'main.py'), 'a').close()

def make_new_target(target, source, env):
    # No project or library option provided
    if not TYPE:
        print("Missing project or library name. Expected --project=..., or --library=..., or --python")
        sys.exit(1)
    
    if env.get("smoke") and TYPE == 'project':
        new_target('smoke', TARGET)
    else:
        new_target(TYPE, TARGET)

new = Command('new_proj.txt', [], make_new_target)
Alias('new', new)
new = Command('new_smoke.txt', [], make_new_target, smoke=True)
Alias('new_smoke', new)
